---
description: Next.js conventions
globs: 
alwaysApply: true
---

  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  - Use PascalCase for:
    - Components
    - Type definitions
    - Interfaces
    - Use kebab-case for:
    - Directory names (e.g., components/auth-wizard)
    - File names (e.g., user-profile.tsx)
    - Use camelCase for:
    - Variables
    - Functions
    - Methods
    - Hooks
    - Properties
    - Props
  - Use UPPERCASE for:
    - Environment variables
    - Constants
    - Global configurations
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.

  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.

  Code Style
  - Use tabs for indentation
  - Use single quotes for strings (except to avoid escaping)
  - Eliminate unused variables
  - Add space before function declaration parentheses
  - Always use strict equality (===) instead of loose equality (==)
  - Space infix operators
  - Add space after commas
  - Use curly braces for multi-line if statements
  - Limit line length to 80 characters

  Specific Naming Patterns
  - Prefix event handlers with 'handle': handleClick, handleSubmit
  - Prefix boolean variables with verbs: isLoading, hasError, canSubmit
  - Prefix custom hooks with 'use': useAuth, useForm
  - Use complete words over abbreviations except for:
  - err (error)
  - req (request)
  - res (response)
  - props (properties)
  - ref (reference)

  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Internationalization
  - Use next-intl for localizing texts across the project.
  - Use spanish by default, with english as second language.

  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.

  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.
  